#Использовать json
#Использовать 1connector



Перем Логин Экспорт;
Перем Пароль Экспорт;
Перем АдресСистемы Экспорт;
Перем КукиДоступа Экспорт;
Перем СоотРеализованыхЗапросов Экспорт;

Процедура ПриСозданииОбъекта() Экспорт
	
	ПутьКФайлуНастроек = "ConnSettings.json";
	СтруктураНастроек = ПолучитьСтруктуруНастроек(ПутьКФайлуНастроек);
	
	Логин = СтруктураНастроек.Пользователь;
	Пароль = СтруктураНастроек.Пароль;
	АдресСистемы = СтруктураНастроек.АдресПодключения;
	КукиДоступа = ПолучитьКукиДоступа();
	СоотРеализованыхЗапросов = ПолучитьСоотРеализованыхЗапросов();
	
КонецПроцедуры

Функция ПолучитьКукиДоступа() Экспорт
	
	Результат = ПолучитьСессиюАвторизации();
	
	_преобразовательJSON = Новый ПарсерJSON();
	
	JSONПакет = _преобразовательJSON.ПрочитатьJSON(Результат, , , Истина);
	
	Возврат JSONПакет.session.name + "=" + JSONПакет.session.value;
КонецФункции

Функция ПолучитьСессиюАвторизации()
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("username", Логин);
	ПараметрыЗапроса.Вставить("password", Пароль);
	
	Результат = КоннекторHTTP.Post(АдресСистемы+"/rest/auth/1/session", , ПараметрыЗапроса).Текст();
	Возврат Результат;
КонецФункции

Функция ПолучитьПроблему(КлючПроблемы, СтркДопПараметры = Неопределено) Экспорт

	СтрктRESTЗапроса = СоотРеализованыхЗапросов.Получить("ПолучитьПроблему");
	
	СтрктRESTЗапроса.ПараметрыШаблонаREST.issueIdOrKey = КлючПроблемы;
	
	Если ЗначениеЗаполнено(СтркДопПараметры) Тогда
		СтрктRESTЗапроса.ПараметрыЗапросаREST = СтркДопПараметры;
	КонецЕсли;
	
	ПакетJSON = ПолучитьОтветJSONRest(АдресСистемы, КукиДоступа, СтрктRESTЗапроса);
	Сообщить("Переданный ключ:"+КлючПроблемы);
	Сообщить("Установленный ключ:"+СтрктRESTЗапроса.ПараметрыШаблонаREST.issueIdOrKey);
	Сообщить("Полученный ключ из запроса:"+ПакетJSON.key);
	Если Не ПакетJSON.Свойство("errorMessages") Тогда
		ПолученнаяПроблема = Новый Проблема(ПакетJSON, ПолучитьСтркПараметрыДоступа());
	Иначе	
		ПолученнаяПроблема = Новый Проблема();
	КонецЕсли;
	
	Возврат ПолученнаяПроблема;
	
КонецФункции





Функция НайтиПроблемыИспользуяJQL(СтрокаЗапросаJQL, МассивИменПолейОтбора = Неопределено, ОбъемВыборки = Неопределено) Экспорт
		
	СтрктRESTЗапроса = СоотРеализованыхЗапросов.Получить("НайтиПроблемыИспользуяJQL");
		
	СтрктRESTЗапроса.ПараметрыЗапросаREST.jql = СтрокаЗапросаJQL;
	
	Если ЗначениеЗаполнено(ОбъемВыборки) Тогда
		СтрктRESTЗапроса.ПараметрыЗапросаREST.maxResults = ОбъемВыборки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивИменПолейОтбора) Тогда
		СтрктRESTЗапроса.ПараметрыЗапросаREST.fields = МассивИменПолейОтбора;
	КонецЕсли;
	
	РезультатЗапроса = ПолучитьОтветJSONRest(АдресСистемы, КукиДоступа, СтрктRESTЗапроса);
	
	МассивДанныхПроблем = РезультатЗапроса.issues;

	МассивПроблем = Новый Массив();
	Для каждого СтркТекДанные Из МассивДанныхПроблем Цикл						
		ПолученнаяПроблема = ПолучитьПроблему(СтркТекДанные.key);
		Сообщить(ПолученнаяПроблема.key);
		МассивПроблем.Добавить(ПолученнаяПроблема);
	КонецЦикла;
	
	Возврат МассивПроблем;
	
	
КонецФункции

Функция СоздатьПроблему(ПараметрыПроблемы) Экспорт
	
	СтрктRESTЗапроса = СоотРеализованыхЗапросов.Получить("СоздатьПроблему");	

	Проблема = Новый Проблема(ПараметрыПроблемы, ПолучитьСтркПараметрыДоступа());

	СтрктRESTЗапроса.ПараметрыЗапросаREST = Новый Структура("fields", Проблема.fields);		

	СтркОтвет = ПолучитьОтветJSONRest(АдресСистемы, КукиДоступа, СтрктRESTЗапроса);

	СозданнаяПроблема = ПолучитьПроблему(СтркОтвет.key);

		
	Возврат СозданнаяПроблема;

КонецФункции

Функция СоздатьПроект(ПараметрыПроекта) Экспорт
	
	СтрктRESTЗапроса = СоотРеализованыхЗапросов.Получить("СоздатьПроект");	

	НовыйПроект = Новый Проект(ПараметрыПроекта, ПолучитьСтркПараметрыДоступа());

	ЗаполнитьЗначенияСвойств(СтрктRESTЗапроса.ПараметрыЗапросаREST, НовыйПроект);		

	СтркОтвет = ПолучитьОтветJSONRest(АдресСистемы, КукиДоступа, СтрктRESTЗапроса);
	
	СозданныйПроект = ПолучитьПроект(СтркОтвет.key);

	Возврат СозданныйПроект;

КонецФункции

Функция ПолучитьПроект(КлючПроекта, СтркДопПараметры = Неопределено) Экспорт

		
	СтрктRESTЗапроса = СоотРеализованыхЗапросов.Получить("ПолучитьПроект");	
	СтрктRESTЗапроса.ПараметрыШаблонаREST.projectIdOrKey = КлючПроекта;	
	
	Если ЗначениеЗаполнено(СтркДопПараметры) Тогда
		СтрктRESTЗапроса.ПараметрыЗапросаREST = СтркДопПараметры;
	КонецЕсли;
	
	ПакетJSON = ПолучитьОтветJSONRest(АдресСистемы, КукиДоступа, СтрктRESTЗапроса);
	
	Если Не ПакетJSON.Свойство("errorMessages") Тогда
		ПолученныйПроект = Новый Проект(ПакетJSON, ПолучитьСтркПараметрыДоступа());
	Иначе	
		ПолученныйПроект = Новый Проект();
	КонецЕсли;
	
	Возврат ПолученныйПроект;

КонецФункции


Функция ПолучитьСоотРеализованыхЗапросов()
	
	
	СтрокаПоляПараметровAPI = "ТипЗапросаREST,АдресREST,ПараметрыШаблонаREST,ПараметрыЗапросаREST";
	
	СоответствиеЗапросов = Новый Соответствие();
	
	СтрокаЗапросаREST = "/rest/api/2/issue/{issueIdOrKey}";
	СтркПараметрыШаблонаREST = Новый Структура("issueIdOrKey");
	СтркПараметрыЗапросаREST = Новый Структура("fields,expand,properties,updateHistory");
	СтркПараметрыAPI = Новый Структура(СтрокаПоляПараметровAPI, "GET", СтрокаЗапросаREST, СтркПараметрыШаблонаREST, СтркПараметрыЗапросаREST);
	СоответствиеЗапросов.Вставить("ПолучитьПроблему", СтркПараметрыAPI);
	
	
	СтрокаЗапросаREST = "/rest/api/2/issue/{issueIdOrKey}";
	СтркПараметрыШаблонаREST = Новый Структура("issueIdOrKey");
	СтркПараметрыЗапросаREST = Новый Структура();
	СтркПараметрыAPI = Новый Структура(СтрокаПоляПараметровAPI, "PUT", СтрокаЗапросаREST, СтркПараметрыШаблонаREST, СтркПараметрыЗапросаREST);
	СоответствиеЗапросов.Вставить("РедактироватьПроблему", СтркПараметрыAPI);
	
	
	СтрокаЗапросаREST = "/rest/api/2/search";
	СтркПараметрыШаблонаREST = Новый Структура();
	СтркПараметрыЗапросаREST = Новый Структура("jql,startAt,maxResults,validateQuery,fields,expand");
	СтркПараметрыAPI = Новый Структура(СтрокаПоляПараметровAPI, "POST", СтрокаЗапросаREST, СтркПараметрыШаблонаREST, СтркПараметрыЗапросаREST);
	СоответствиеЗапросов.Вставить("НайтиПроблемыИспользуяJQL", СтркПараметрыAPI);

	
	СтрокаЗапросаREST = "/rest/api/2/issue";	
	СтркПараметрыШаблонаREST = Новый Структура();	
	СтрокаОсновныеПоля 		 = "project,issuetype,summary,description";
	СтрокаДополнительныеПоля = "fixVersions,priority,labels,versions,components,reporter,timetracking,parent,duedate";
	СтруктураFields = Новый Структура(СтрокаОсновныеПоля + "," + СтрокаДополнительныеПоля);
	СтркПараметрыЗапросаREST = Новый Структура("update,fields", , СтруктураFields);

	СтркПараметрыAPI = Новый Структура(СтрокаПоляПараметровAPI, "POST", СтрокаЗапросаREST, СтркПараметрыШаблонаREST, СтркПараметрыЗапросаREST);
	СоответствиеЗапросов.Вставить("СоздатьПроблему", СтркПараметрыAPI);

	СтрокаЗапросаREST = "/rest/api/2/project";
	СтркПараметрыШаблонаREST = Новый Структура();
	СтркПараметрыЗапросаREST = Новый Структура("key,name,projectTypeKey,projectTemplateKey,description,lead");
	СтркПараметрыAPI = Новый Структура(СтрокаПоляПараметровAPI, "POST", СтрокаЗапросаREST, СтркПараметрыШаблонаREST, СтркПараметрыЗапросаREST);
	СоответствиеЗапросов.Вставить("СоздатьПроект", СтркПараметрыAPI);

	СтрокаЗапросаREST = "/rest/api/2/project/{projectIdOrKey}";
	СтркПараметрыШаблонаREST = Новый Структура("projectIdOrKey");
	СтркПараметрыЗапросаREST = Новый Структура("key,name,projectTypeKey,projectTemplateKey,description,lead");
	СтркПараметрыAPI = Новый Структура(СтрокаПоляПараметровAPI, "GET", СтрокаЗапросаREST, СтркПараметрыШаблонаREST, СтркПараметрыЗапросаREST);
	СоответствиеЗапросов.Вставить("ПолучитьПроект", СтркПараметрыAPI);
	
	Возврат СоответствиеЗапросов;
КонецФункции





Функция ПолучитьIDТипЗадачиИзПроектаПоИмени(ИмяПроекта,ИмяТипаЗадачи) Экспорт
	ВызватьИсключение " ПолучитьIDТипЗадачиИзПроектаПоИмени Не реализовано";

КонецФункции

Функция ПолучитьIDПроектаПоИмени(ИмяПроекта) Экспорт
	ВызватьИсключение "ПолучитьIDПроектаПоИмени Не реализовано";
КонецФункции


#Область Вспомогательный
Функция ПолучитьОтветJSONRest(АдресСистемы, КукиДоступа, СтрктRESTЗапроса) Экспорт
	
	_преобразовательJSON = Новый ПарсерJSON();
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Cookie", КукиДоступа);

	СтрктRESTЗапросаТекущая = Новый Структура;
	Для каждого ТекСвойство Из СтрктRESTЗапроса Цикл
		СтрктRESTЗапросаТекущая.Вставить(ТекСвойство.Ключ, ТекСвойство.Значение);		
	КонецЦикла;
	
	
	СтрктRESTЗапросаТекущая = ЗаполнитьПараметрыШаблона(СтрктRESTЗапросаТекущая);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Cookie", КукиДоступа);
	Если СтрктRESTЗапросаТекущая.ТипЗапросаREST = "GET" Тогда
		Если ЕстьЗаполненныеПоляСтрк(СтрктRESTЗапросаТекущая.ПараметрыЗапросаREST) Тогда
			Результат = КоннекторHTTP.Get(АдресСистемы + СтрктRESTЗапросаТекущая.АдресREST, СтрктRESTЗапросаТекущая.ПараметрыЗапросаREST, Новый Структура("Заголовки", Заголовки)).Текст();
		Иначе
			Результат = КоннекторHTTP.Get(АдресСистемы + СтрктRESTЗапросаТекущая.АдресREST, , Новый Структура("Заголовки", Заголовки)).Текст();
		КонецЕсли;
	ИначеЕсли СтрктRESTЗапросаТекущая.ТипЗапросаREST = "PUT" Тогда
		Результат = КоннекторHTTP.Put(АдресСистемы + СтрктRESTЗапросаТекущая.АдресREST, , СтрктRESTЗапросаТекущая.ПараметрыЗапросаREST, Новый Структура("Заголовки", Заголовки)).Текст();
	ИначеЕсли СтрктRESTЗапросаТекущая.ТипЗапросаREST = "POST" Тогда
		Результат = КоннекторHTTP.Post(АдресСистемы + СтрктRESTЗапросаТекущая.АдресREST, , СтрктRESTЗапросаТекущая.ПараметрыЗапросаREST, Новый Структура("Заголовки", Заголовки)).Текст();
	Иначе
		ВызватьИсключение "Вызывается не реализованный вид запроса";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда		
		Возврат _преобразовательJSON.ПрочитатьJSON(Результат, , , Истина);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	

КонецФункции

Функция ПолучитьСтркПараметрыДоступа()

	Возврат Новый Структура("Логин, Пароль, АдресСистемы,КукиДоступа",Логин, Пароль, АдресСистемы, КукиДоступа);
	
КонецФункции

Функция ЕстьЗаполненныеПоляСтрк(СтруктураНаПроверку)
		
		
	Для каждого ТекЭлемент Из СтруктураНаПроверку Цикл
		Если ЗначениеЗаполнено(ТекЭлемент.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполнитьПараметрыШаблона(СтрктRESTЗапроса)
	
	СтрокаЗапроса = СтрктRESTЗапроса.АдресREST;
	Для каждого ТекПараметрШаблона Из СтрктRESTЗапроса.ПараметрыШаблонаREST Цикл
		СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, "{" + ТекПараметрШаблона.Ключ + "}", ТекПараметрШаблона.Значение);
	КонецЦикла;
	СтрктRESTЗапроса.АдресREST = СтрокаЗапроса;
	
	Возврат СтрктRESTЗапроса;
КонецФункции

Функция ЕстьФайлНастроек(Знач НазваниеФайла = Неопределено);
	
	ВыбФайл = Новый Файл(НазваниеФайла);
	
	Возврат ВыбФайл.Существует();
КонецФункции

Функция ПолучитьСтруктуруНастроек(ИмяФайлаНастроек)
	
	СтруктураНастроек = Новый Структура;
	
	Если ЕстьФайлНастроек(ИмяФайлаНастроек) Тогда
		ФайлОписания = Новый ТекстовыйДокумент;
		ФайлОписания.Прочитать(ИмяФайлаНастроек, КодировкаТекста.UTF8NoBOM);
		ТекстОписания = ФайлОписания.ПолучитьТекст();
		_преобразовательJSON = Новый ПарсерJSON();
		
		СтруктураНастроек = _преобразовательJSON.ПрочитатьJSON(ТекстОписания, , , Истина);
		
	КонецЕсли;
	
	Возврат СтруктураНастроек;
КонецФункции
#КонецОбласти



